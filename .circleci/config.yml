perl-cache-paths: &perl-cache-paths
  paths:
    - ./local
    - ./vendor/cache
    - ./.cpanm

lua-cache-paths: &lua-cache-paths
  paths:
    - ./lua_modules

# ------------------------------------------------------------------------

version: 2.1

commands:
  restore-lua-cache:
    steps:
      - restore_cache:
          keys:
          - apicast-rocks-{{ arch }}-{{ checksum "gateway/Roverfile.lock" }}
          - apicast-rocks-{{ arch }}-{{ .Branch }}
          - apicast-rocks-{{ arch }}-master

  restore-perl-cache:
    steps:
      - restore_cache:
          keys:
          - apicast-cpanm-v2-{{ arch }}-{{ checksum "gateway/cpanfile.snapshot" }}
          - apicast-cpanm-v2-{{ arch }}-{{ .Branch }}
          - apicast-cpanm-v2-{{ arch }}-master

  install-docker-compose:
    steps:
      - run: |
          pip install "docker-compose==${DOCKER_COMPOSE_VERSION}"
          docker-compose version

  setup-docker:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true

  attach-workspace:
    steps:
      - checkout
      - attach_workspace:
          at: .

  setup-s2i:
    steps:
      - run: apk update && apk add wget make bash curl py-pip git openssh-client
      - install-docker-compose
      - setup-docker
      - attach-workspace
      - run: travis/install-s2i.sh /usr/local/bin # needs to be after checkout because it uses script from the repo

  store-junit-results:
    steps:
      - store_test_results:
          path: tmp/junit
      - store_artifacts:
          path: tmp/junit
          destination: junit

  report-codecov:
    parameters:
      suite:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - run:
          name: Report << parameters.suite >> Code Coverage
          command: |
            set +x # allow failures
            curl -s https://codecov.io/bash | bash -s - << parameters.flags >> -F << parameters.suite >>
          when: always

  login-docker:
    parameters:
      command:
        type: string
    steps:
      - deploy:
          name: "Push image to the container registry"
          command: |
            if [ -n "${DOCKER_USERNAME}" ] && [ -n "${DOCKER_PASSWORD}" ] && [ -n "${DOCKER_REGISTRY}" ]
            then
              docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}";
              sh -ec '<< parameters.command >>'
              echo "Successfully pushed image to ${DOCKER_REGISTRY}"
            else
              echo "Skipping docker registry push."
            fi
executors:
  s2i:
    working_directory: /opt/app-root/apicast
    docker:
    - image: docker:stable
    environment:
      S2I_VERSION: "1.1.9a-40ad911d"
      DOCKER_COMPOSE_VERSION: "1.16.1"
      OPENRESTY_VERSION: "libyaml"

  openresty:
    working_directory: /opt/app-root/apicast
    docker:
    - image: quay.io/3scale/s2i-openresty-centos7:libyaml
    - image: redis:3.2.8-alpine
    environment:
      TEST_NGINX_BINARY: openresty
      LUA_BIN_PATH: /opt/app-root/bin
jobs:

  build-s2i:
    executor: s2i

    steps:
      - setup-docker
      - run: |
          docker pull quay.io/3scale/s2i-openresty-centos7:${OPENRESTY_VERSION} &
          docker pull quay.io/3scale/s2i-openresty-centos7:${OPENRESTY_VERSION}-runtime &
          wait

  # Try to build s2i runtime image and run smoke tests
  s2i-runtime:
    executor: s2i
    environment:
      IMAGE_NAME: apicast-runtime-image
    steps:
      - setup-s2i
      - run:
          command: make runtime-image

      - run: make test-runtime-image gateway-logs --keep-going
      - login-docker:
          command: |
            IMAGE_NAME="apicast:${CIRCLE_TAG:-${CIRCLE_BRANCH}}"
            docker tag apicast-runtime-image ${IMAGE_NAME}
            make push

  # Try to build s2i builder image and run smoke tests
  s2i-builder:
    executor: s2i
    environment:
      IMAGE_NAME: apicast-builder-image
    steps:
      - setup-s2i
      - run:
          name: "Build image"
          command: make builder-image

      - run:
          name: "Build image (incremental)"
          command: make builder-image

      - run: |
          make test-builder-image gateway-logs --keep-going
          make lint-schema

      - login-docker:
          command: |
            IMAGE_NAME="apicast:${CIRCLE_TAG:-${CIRCLE_BRANCH}}-builder"
            docker tag apicast-builder-image ${IMAGE_NAME}
            make push

  # Download, build and store Lua dependencies.

  build-lua:
    executor: openresty

    steps:
      - checkout
      - run:
          # This can happen when doing local build: lua_modules is copied from the host
          name: Cleanup local dependencies
          command: rm -rf lua_modules
      - restore-lua-cache
      - run: make lua_modules
      - save_cache:
          key: apicast-rocks-{{ arch }}-{{ checksum "gateway/Roverfile.lock" }}
          <<: *lua-cache-paths
      - persist_to_workspace:
          root: .
          <<: *lua-cache-paths

  # Download, build and store Perl dependencies.

  build-perl:
    executor: openresty

    steps:
      - checkout
      - restore-perl-cache
      - run: make carton
      - save_cache:
          key: apicast-cpanm-v2-{{ arch }}-{{ checksum "gateway/cpanfile.snapshot" }}
          <<: *perl-cache-paths
      - persist_to_workspace:
          root: .
          <<: *perl-cache-paths

  # Run unit tests (busted)

  busted:
      executor: openresty

      parallelism: 1
      steps:
        - attach-workspace
        - run:
            name: 'busted'
            command: $(make rover) exec make busted
            environment:
              JUNIT_OUTPUT_FILE: tmp/junit/busted/report.xml
        - report-codecov:
            suite: busted
        - store-junit-results

  # Generate documentation

  docs:
    executor: openresty

    steps:
      - attach-workspace
      - run: make doc
      - store_artifacts:
          path: doc/lua
          destination: doc

  # Run integration tests

  prove:
    executor: openresty

    parallelism: 3
    steps:
      - attach-workspace
      - run:
          name: 'prove'
          command: /usr/libexec/s2i/entrypoint make prove
          environment:
            JUNIT_OUTPUT_FILE: tmp/junit/prove/report.xml
            TEST_NGINX_ERROR_LOG: tmp/junit/prove/error.log
            HARNESS: TAP::Harness::JUnit
      - report-codecov:
          suite: prove
          flags: -f 'luacov.report.*.out'
      - store-junit-results

  # Run benchmark on master and this branch

  benchmark:
    machine: true
    steps:
      - checkout
      - run: IMAGE_TAG=${CIRCLE_TAG:-${CIRCLE_BRANCH}} make benchmark
      - run: IMAGE_TAG=master make benchmark
      - store_artifacts:
          path: tmp/benchmark
          destination: benchmark

  # Run profiling tasks
  profile:
    machine: true
    steps:
      - checkout
      - run: sudo --preserve-env script/install/circleci.sh
      - run: sudo --preserve-env script/install/utilities.sh
      - run: script/install/apicast.sh
      - run: bin/apicast --dev --test
      - store_artifacts:
          path: tmp/profile
          destination: profile

build-tags: &build-tags
  filters:
    tags:
      only: /.*/

ignore-forks: &ignore-forks
  branches:
    ignore: '/pull\/\d+/' # forks branch name is pull/PR_NUMBER

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-lua:
          <<: *build-tags
      - build-perl:
          <<: *build-tags
      - busted:
          <<: *build-tags
          requires:
            - build-lua
      - prove:
          <<: *build-tags
          requires:
            - build-lua
            - build-perl
      - docs:
          <<: *build-tags
          requires:
            - build-lua
      - s2i-builder:
          <<: *build-tags
          context: org-global
          requires:
            - build-lua
            - build-perl
      - s2i-runtime:
          <<: *build-tags
          context: org-global
          requires:
            - build-lua
            - build-perl
